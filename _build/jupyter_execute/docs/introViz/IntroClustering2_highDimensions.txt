import numpy as np
import seaborn as sns
import pandas as pd
from sklearn import cluster
import sklearn as sk


#simulate some random values
array_class1 = {"x":np.random.normal(1,4, size=1000),
                "y":np.random.normal(1,4, size=1000),
                "z":np.random.normal(1,40, size=1000),
                "class": 1}

#put them in a dataframe
df_class1 = pd.DataFrame(data=array_class1)

#plot it
sns.scatterplot(data=df_class1, x="x",y="y")


sns.scatterplot(data=df_class1, x="x",y="z")

#generate some random values
array_class2 = {"x":np.random.normal(8,5, size=1000),
                "y":np.random.normal(8,1, size=1000),
                "z":np.random.normal(8,0.5, size=1000),
                "class": 2}

#put them in a dataframe
df_class2 = pd.DataFrame(data=array_class2)

#bind the two dataframes together by rows
df_class = pd.concat([df_class1,df_class2], axis = 0) #axis=0 just says to bind by rows, axis=1 would be by columns 

#plot it
sns.scatterplot(data=df_class, x="x",y="y", hue='class')

sns.scatterplot(data=df_class, x="x",y="z", hue='class')

#import plotly
import plotly.express as px

#build a figure with three axis
fig = px.scatter_3d(df_class, x='x', y='y', z='z', color='class')
fig.show()

#initalize the kmeans algorithm
clus_kmeans = cluster.KMeans(n_clusters=2) #how many clusters are there?

#fit the model
clus_kmeans.fit(df_class[['x','y','z']] )

#make some predictions
df_class['pred_kmeans'] = clus_kmeans.fit_predict(df_class[['x','y','z']] )

#take a look
df_class

sk.metrics.silhouette_score(X=df_class.loc[:,['x','y','z']],labels=df_class['pred_kmeans'])

#build a figure with three axis
fig_pred = px.scatter_3d(df_class, x='x', y='y', z='z', color='pred_kmeans')
fig_pred.show()

!pip install hdbscan
import hdbscan

#initalize the kmeans algorithm (hyperparameter - choose minimum cluster size)
clus_hdbscan = hdbscan.HDBSCAN(min_cluster_size = ?) 

#fit the model
clus_hdbscan.fit(df_class[['?','?','?']] )

#make some predictions
df_class['pred_khdbscan'] = clus_hdbscan.fit_predict(?] )

#build a figure with three axis
fig_Hpred = px.scatter_3d(df_class, x='?', y='?', z='?', color='?')
fig_Hpred.show()
