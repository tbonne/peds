import sklearn as sk
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import statsmodels.api as sm #for running regression!
import statsmodels.formula.api as smf


df_boston = pd.read_csv('/content/bostonHouses.csv')

?

?

sns.scatterplot(data=df_boston, x="?",y="price")

df_boston_corr = df_boston.?()
sns.heatmap(data=?)

#Build the model
linear_reg_model = smf.ols(formula='price ~ RM', data=df_boston)

#Use the data to fit the model (i.e., find the best intercept and slope parameters)
linear_reg_results = linear_reg_model.fit()

#make predictions using the model
df_boston['price_pred'] = linear_reg_results.predict(df_boston)

df_boston

sns.scatterplot(data=df_boston,x='RM', y='price')
sns.scatterplot(data=df_boston,x='RM', y='price_pred')


print(linear_reg_results.summary())

df_boston = df_boston.drop('price_pred',axis=1)

#load libraries to do the training and testing split
from sklearn.model_selection import train_test_split

#Split the dataframe into 80% training and 20% testing datasets
df_train, df_test = train_test_split(df_boston, test_size=0.20)

#take a look at the shape of the training dataset
df_train.shape

#take a look at the shape of the testing dataset
df_test.shape


#define model parameters
linear_reg_split_model = smf.ols(formula='?', data=df_train) #note: using training data

#fit the model to the training data
linear_reg_split_results = linear_reg_split_model.?

#predict values in the training and testing dataset
df_train['price_pred'] = ?(df_train) #note: using train data
df_test['price_pred'] = ?(df_test) #note: using test data

#Get a summary of the model parameters
print(linear_reg_split_results.summary())

?(data=df_train,x="RM",y="price") # observed price
?(data=df_train,x="RM",y="price_pred") #predicted price


?(data=df_test,x="RM",y="price") # observed price
?(data=df_test,x="RM",y="price_pred") # predicted price


#mean squared error
mse_train = sk.metrics.mean_squared_error(df_train['price'], df_train['price_pred']) 

print(" Mean squared error = ", mse_train)

#mean squared error
mse_test = sk.metrics.mean_squared_error(df_test['price'], df_test['price_pred']) 

print(" Mean squared error = ", mse_test)

#define model parameters, and the training data to be used
multi_linear_reg = smf.ols(formula='price ~ RM + ZN', data=df_train) #use training data

#fit the model to the training data
results_RN_ZN = multi_linear_reg.fit() 

#Predict values in the testing dataset
df_test['price_pred_RM_ZN'] = results_RN_ZN.predict(df_test) #predict on testing data

#Get a summary of the model parameters
print(results_RN_ZN.summary()) 


df_test

sns.scatterplot(data=df_test,x='RM', y='price')
sns.scatterplot(data=df_test,x='RM', y='price_pred_RM_ZN')


sns.scatterplot(data=df_test,x='ZN', y='price')
sns.scatterplot(data=df_test,x='ZN', y='price_pred_RM_ZN')

#mean squared error
mse_multi = sk.metrics.mean_squared_error(df_test['price'], df_test['price_pred_RM_ZN']) 

print(" Mean squared error = ", mse_multi.round(2))



#define model parameters
large_linear_reg = ?

#fit the model to the training data
large_linear_reg_res = ?

#predit with the full model
df_test['price_pred_full'] = ?

#Get a summary of the model parameters
print(?) 

#mean squared error
mse_full = ?

print(" Mean squared error = ", ?)


from sklearn.preprocessing import StandardScaler


#Split the dataframe into 80% training and 20% testing datasets
df_train, df_test = train_test_split(df_boston, test_size=0.20)

#create a copy of your dataframe to transform
df_train_scaled = df_train.copy()

#1. build the preprocessing transformer
scal = StandardScaler()

#2. Fit the DataFrameMapper, and transform the data 
df_train_scaled = scal.fit_transform(df_train[:])

#take a look
df_train_scaled



#define model parameters, and the training data to be used
best_linear_reg_scaled = smf.ols(formula='price ~ RM', data=df_train_scaled) 

#fit the model to the training data
?

#Get a summary of the model parameters
?

