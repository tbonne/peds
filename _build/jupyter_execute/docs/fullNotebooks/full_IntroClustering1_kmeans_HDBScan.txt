import numpy as np
import pandas as pd
import seaborn as sns
import sklearn as sk

from sklearn import cluster

#simulate 100 values from a normal distribution with a mean of 1 and an sd of 4
x = np.random.normal(1,4, size = 10)

#take a look
x

#simulate some random values
array_class1 = {"x":np.random.normal(1,4, size=1000),
                "y":np.random.normal(1,4, size=1000),
                "class": 1}

#put them in a dataframe
df_class1 = pd.DataFrame(data=array_class1)

#plot it
sns.scatterplot(data=df_class1, x="x",y="y")



#generate some random values
array_class2 = {"x":np.random.normal(8,5, size=1000),
                "y":np.random.normal(8,1, size=1000),
                "class": 2}

#put them in a dataframe
df_class2 = pd.DataFrame(data=array_class2)

#bind the two dataframes together by rows
df_class = pd.concat([df_class1,df_class2], axis = 0) #axis=0 just says to bind by rows, axis=1 would be by columns 

#plot it
sns.scatterplot(data=df_class, x="x",y="y", hue='class')

#initalize the kmeans algorithm
clus_kmeans = cluster.KMeans(n_clusters=2) 

#fit the model
clus_kmeans.fit(df_class[['x','y']] )

#make some predictions
df_class['pred_kmeans'] = clus_kmeans.fit_predict(df_class[['x','y']] )

#take a look
df_class

#plot it!
sns.scatterplot(data=df_class,x="x",y="y",hue="pred_kmeans")

#Mean silhouette distance
sk.metrics.silhouette_score(X=df_class.iloc[:,0:2],labels=df_class['pred_kmeans'])

#here is a simple function
def run_k_means(numb):
  return numb

run_k_means(2)

def run_k_means(numb):
  
  #1. initalize the ml algorithm
  clus_kmeans = cluster.KMeans(n_clusters=numb)

  #2. fit the ml algorithm
  clus_kmeans.fit(df_class[['x','y']] )

  #3. make some predictions
  df_class['pred_kmeans'] = clus_kmeans.fit_predict(df_class[['x','y']] )

  #4. measure performance
  avg_sil = sk.metrics.silhouette_score(X=df_class.iloc[:,0:2],labels=df_class['pred_kmeans'])

  return avg_sil

run_k_means(4)

for i in range(2,10):
  print(i)

for i in range(2,10):
  print(run_k_means(i))

avg_sil = []
for i in range(2,10):
  avg_sil.append(run_k_means(i))

#create a dictionary
dict_sil = {'sil':avg_sil, 'clusters':list(range(2,10)) }

#convert the dictionary into a dataframe
df_sil = pd.DataFrame(dict_sil)

#plot
sns.relplot(x='clusters', y='sil', data=df_sil, kind="line")

!pip install hdbscan
import hdbscan

#initalize the kmeans algorithm (hyperparameter - choose minimum cluster size)
clus_hdbscan = hdbscan.HDBSCAN(min_cluster_size = 30) 

#fit the model
clus_hdbscan.fit(df_class[['x','y']] )

#make some predictions
df_class['pred_khdbscan'] = clus_hdbscan.fit_predict(df_class[['x','y']] )

#plot it!
sns.scatterplot(data=df_class, x="x",y="y", hue='pred_khdbscan')

#estimate silhouette score for k-means
sk.metrics.silhouette_score(X=df_class.loc[:,['x','y']], labels=df_class['pred_khdbscan'])

#get only those points that are given a cluster
df_class_sub = df_class[df_class.pred_khdbscan > -1]

#estimate silhouette score for k-means
sk.metrics.silhouette_score(X=df_class_sub.loc[:,['x','y']],labels=df_class_sub['pred_khdbscan'])

def run_HDBScan(minNumb):
  
  #1. initalize the ml algorithm
  clus_hdbscan = hdbscan.HDBSCAN(min_cluster_size = minNumb) 

  #2. fit the ml algorithm
  clus_hdbscan.fit(df_class[['x','y']] )

  #3. make some predictions
  df_class['pred_khdbscan'] = clus_hdbscan.fit_predict(df_class[['x','y']] )

  #4. measure performance
  avg_sil = sk.metrics.silhouette_score(X=df_class.loc[:,['x','y']], labels=df_class['pred_khdbscan'])

  return avg_sil

#run your function with 500 as the minimum number of points
run_HDBScan(40)

for i in range(10,100,10):
  print(run_HDBScan(i))

avg_sil_hd = []
for i in range(10,100,10):
  avg_sil_hd.append(run_HDBScan(i))

#create a dictionary
dict_sil = {'sil':avg_sil_hd, 'min_cluster_size':list(range(10,100,10)) }

#convert the dictionary into a dataframe
df_sil_hd = pd.DataFrame(dict_sil)

#plot
sns.relplot(x='min_cluster_size', y='sil', data=dict_sil, kind="line")
